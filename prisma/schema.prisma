// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url  = env("DATABASE_URL")
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    password      String
    ownedProjects  Project[]        @relation("UserProjects")
    teamProjects   ProjectAndTeam[]
    assignedTasks  TaskAndUser[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum ProjectStatus {
  PENDING
  ACTIVE
  COMPLETED
}


model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  status      ProjectStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownedBy     String

  owner       User     @relation("UserProjects", fields: [ownedBy], references: [id])
  tasks       Task[]
  teamMembers ProjectAndTeam[]
}

model ProjectAndTeam {
  id         String   @id @default(cuid())
  projectId  String
  userId     String
  
  project    Project  @relation(fields: [projectId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
}

enum TaskStatus {
  TODO
  INPROCESS
  COMPLETED
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String
  projectId   String
  status      TaskStatus
  tags        String[]
  priority    String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  project     Project  @relation(fields: [projectId], references: [id])
  assignees   TaskAndUser[]
}

model TaskAndUser {
  id       String  @id @default(cuid())
  taskId   String
  userId   String
  task     Task    @relation(fields: [taskId], references: [id])
  user     User    @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
}
